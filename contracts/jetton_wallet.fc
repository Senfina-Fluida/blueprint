;; Jetton Wallet Smart Contract

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#pragma version >=0.2.0;

{-

NOTE that this tokens can be transferred within the same workchain.

This is suitable for most tokens, if you need tokens transferable between workchains there are two solutions:

1) use more expensive but universal function to calculate message forward fee for arbitrary destination (see `misc/forward-fee-calc.cs`)

2) use token holder proxies in target workchain (that way even 'non-universal' token can be used from any workchain)

-}

const min_tons_for_storage = 10000000; ;; 0.01 TON
const gas_consumption = 10000000; ;; 0.01 TON

{-
  Storage
  storage#_ balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

(int, slice, slice, cell) load_data() inline {
  ~strdump("Entering load_data function.");
  ;; Instead of parsing data from get_data(), we hardcode the values.
  int balance = 5;
  ~strdump("Loaded balance (hardcoded):");
  ~dump(balance);

  ;; Hardcoded owner_address: storing a constant 32-bit unsigned value (0x11111111)
  slice owner_address = begin_cell()
      .store_uint(0x11111111, 32)
      .end_cell()
      .begin_parse();
  ~strdump("Hardcoded owner_address:");
  ~dump(owner_address);

  ;; Hardcoded jetton_master_address: storing a constant 32-bit unsigned value (0x22222222)
  slice jetton_master_address = begin_cell()
      .store_uint(0x22222222, 32)
      .end_cell()
      .begin_parse();
  ~strdump("Hardcoded jetton_master_address:");
  ~dump(jetton_master_address);

  ;; Hardcoded jetton_wallet_code: storing a constant 32-bit unsigned value (0x33333333)
  cell jetton_wallet_code = begin_cell()
      .store_uint(0x33333333, 32)
      .end_cell();
  ~strdump("Hardcoded jetton_wallet_code:");
  ~dump(jetton_wallet_code);

  ~strdump("Exiting load_data function.");
  return (balance, owner_address, jetton_master_address, jetton_wallet_code);
}



() save_data (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure inline {
  set_data(pack_jetton_wallet_data(balance, owner_address, jetton_master_address, jetton_wallet_code));
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  ~strdump("Entered send_tokens function.");

  int query_id = in_msg_body~load_uint(64);
  ~strdump("Loaded query_id:");
  ~dump(query_id);

  int jetton_amount = in_msg_body~load_coins();
  ~strdump("Loaded jetton_amount:");
  ~dump(jetton_amount);

  slice to_owner_address = in_msg_body~load_msg_addr();
  ~strdump("Loaded to_owner_address:");
  ~dump(to_owner_address);

  ~strdump("Forcing chain with to_owner_address.");
  force_chain(to_owner_address);

  ~strdump("Loading wallet data.");
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  ~strdump("Wallet data loaded:");
  ~strdump("balance before deduction:");
  ~dump(balance);
  
  balance -= jetton_amount;
  ~strdump("Balance after subtracting jetton_amount:");
  ~dump(balance);

  ~strdump("Verifying sender_address equals owner_address.");
  ;; throw_unless(705, equal_slices(owner_address, sender_address));
  ~strdump("Verifying that balance is non-negative.");
  ;; throw_unless(706, balance >= 0);

  cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
  ~strdump("Calculated state_init:");
  ~dump(state_init);

  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  ~strdump("Calculated to_wallet_address:");
  ~dump(to_wallet_address);

  slice response_address = in_msg_body~load_msg_addr();
  ~strdump("Loaded response_address:");
  ~dump(response_address);

  cell custom_payload = in_msg_body~load_dict();
  ~strdump("Loaded custom_payload:");
  ~dump(custom_payload);

  int forward_ton_amount = in_msg_body~load_coins();
  ~strdump("Loaded forward_ton_amount:");
  ~dump(forward_ton_amount);

  throw_unless(708, slice_bits(in_msg_body) >= 1);
  ~strdump("Verified in_msg_body has at least 1 bit remaining.");

  slice either_forward_payload = in_msg_body;
  ~strdump("Assigned either_forward_payload from in_msg_body:");
  ~dump(either_forward_payload);

  ~strdump("Building message cell for transfer.");
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init);

  ~strdump("Building message body for internal_transfer.");
  var msg_body = begin_cell()
    .store_uint(op::internal_transfer(), 32)
    .store_uint(query_id, 64)
    .store_coins(jetton_amount)
    .store_slice(owner_address)
    .store_slice(response_address)
    .store_coins(forward_ton_amount)
    .store_slice(either_forward_payload)
    .end_cell();
  ~strdump("Message body constructed:");
  ~dump(msg_body);

  msg = msg.store_ref(msg_body);
  ~strdump("Final message cell constructed:");
  ~dump(msg);

  int fwd_count = forward_ton_amount ? 2 : 1;
  ~strdump("Calculated forward message count (fwd_count):");
  ~dump(fwd_count);

  ~strdump("Validating fee requirements.");
  throw_unless(709, msg_value >
                     forward_ton_amount +
                     ;; 3 messages: wal1->wal2, wal2->owner, wal2->response
                     ;; but last one is optional (it is ok if it fails)
                     fwd_count * fwd_fee +
                     (2 * gas_consumption + min_tons_for_storage));
  ~strdump("Fee validation passed.");

  ~strdump("Sending raw message.");
  send_raw_message(msg.end_cell(), 64); ;; revert on errors
  ~strdump("Raw message sent successfully.");

  ~strdump("Saving updated wallet data.");
  ;; save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
  ~strdump("Wallet data saved.");
}


{-
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;
  slice from_address = in_msg_body~load_msg_addr();
  slice response_address = in_msg_body~load_msg_addr();
  throw_unless(707,
      equal_slices(jetton_master_address, sender_address)
      |
      equal_slices(calculate_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
  );
  int forward_ton_amount = in_msg_body~load_coins();

  int ton_balance_before_msg = my_ton_balance - msg_value;
  int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
  msg_value -= (storage_fee + gas_consumption);
  if(forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
        .store_uint(op::transfer_notification(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(from_address)
        .store_slice(either_forward_payload)
        .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6) ;; we should not bounce here cause receiver can have uninitialized contract
      .store_slice(owner_address)
      .store_coins(forward_ton_amount)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);
  }

  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
      .store_slice(response_address)
      .store_coins(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::excesses(), 32)
      .store_uint(query_id, 64);
    send_raw_message(msg.end_cell(), 2);
  }

  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  slice response_address = in_msg_body~load_msg_addr();
  ;; ignore custom payload
  ;; slice custom_payload = in_msg_body~load_dict();
  balance -= jetton_amount;
  throw_unless(705, equal_slices(owner_address, sender_address));
  throw_unless(706, balance >= 0);
  throw_unless(707, msg_value > fwd_fee + 2 * gas_consumption);

  var msg_body = begin_cell()
      .store_uint(op::burn_notification(), 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(owner_address)
      .store_slice(response_address)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_master_address)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 64);

  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() on_bounce (slice in_msg_body) impure {
  in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  int op = in_msg_body~load_uint(32);
  throw_unless(709, (op == op::internal_transfer()) | (op == op::burn_notification()));
  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;
  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ~strdump("-------JETTON TEST TEST----------");
    ~strdump("Received parameters:");
    ~strdump("my_balance:");
    ~dump(my_balance);
    ~strdump("msg_value:");
    ~dump(msg_value);
    ~strdump("in_msg_full:");
    ~dump(in_msg_full);
    ~strdump("in_msg_body:");
    ~dump(in_msg_body);

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
      ~strdump("in_msg_body is empty. Exiting function.");
      return ();
    }

    slice cs = in_msg_full.begin_parse();
    ~strdump("Parsed in_msg_full into slice cs.");

    int flags = cs~load_uint(4);
    ~strdump("Loaded flags:");
    ~dump(flags);

    if (flags & 1) {
      ~strdump("Flags indicate bounce message. Calling on_bounce with in_msg_body:");
      ~dump(in_msg_body);
      on_bounce(in_msg_body);
      return ();
    }

    slice sender_address = cs~load_msg_addr();
    ~strdump("Loaded sender_address:");
    ~dump(sender_address);

    ;; Skip destination address
    {
      slice dst_address = cs~load_msg_addr();
      ~strdump("Skipped destination address (dst_address):");
      ~dump(dst_address);
    }

    ;; Skip value (coins)
    {
      int skipped_value = cs~load_coins();
      ~strdump("Skipped coins value:");
      ~dump(skipped_value);
    }

    cs~skip_bits(1); ;; skip extracurrency collection
    ~strdump("Skipped extracurrency collection bit.");

    ;; Skip ihr_fee
    {
      int skipped_ihr_fee = cs~load_coins();
      ~strdump("Skipped ihr_fee:");
      ~dump(skipped_ihr_fee);
    }

    ;; Load coins for forward fee calculation
    int coins_for_fee = cs~load_coins();
    ~strdump("Loaded coins for forward fee calculation:");
    ~dump(coins_for_fee);
    
    int fwd_fee = muldiv(coins_for_fee, 3, 2);
    ~strdump("Computed forward fee (fwd_fee):");
    ~dump(fwd_fee);

    int op = in_msg_body~load_uint(32);
    ~strdump("Loaded operation code (op) from in_msg_body:");
    ~dump(op);

    if (op == op::transfer()) { ;; outgoing transfer
      ~strdump("Operation is transfer (outgoing). Preparing to call send_tokens with:");
      ~strdump("in_msg_body:");
      ~dump(in_msg_body);
      ~strdump("sender_address:");
      ~dump(sender_address);
      ~strdump("msg_value:");
      ~dump(msg_value);
      ~strdump("fwd_fee:");
      ~dump(fwd_fee);
      send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
      return ();
    }

    if (op == op::internal_transfer()) { ;; incoming transfer
      ~strdump("Operation is internal_transfer (incoming). Preparing to call receive_tokens with:");
      ~strdump("in_msg_body:");
      ~dump(in_msg_body);
      ~strdump("sender_address:");
      ~dump(sender_address);
      ~strdump("my_balance:");
      ~dump(my_balance);
      ~strdump("fwd_fee:");
      ~dump(fwd_fee);
      ~strdump("msg_value:");
      ~dump(msg_value);
      receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
      return ();
    }

    if (op == op::burn()) { ;; burn
      ~strdump("Operation is burn. Preparing to call burn_tokens with:");
      ~strdump("in_msg_body:");
      ~dump(in_msg_body);
      ~strdump("sender_address:");
      ~dump(sender_address);
      ~strdump("msg_value:");
      ~dump(msg_value);
      ~strdump("fwd_fee:");
      ~dump(fwd_fee);
      burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
      return ();
    }

    ~strdump("Unknown operation encountered. Throwing error 0xffff.");
    throw(0xffff);
}


(int, slice, slice, cell) get_wallet_data() method_id {
  return load_data();
}
